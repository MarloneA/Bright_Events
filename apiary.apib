FORMAT: 1A
HOST: https://andela-brightevents.herokuapp.com/

# Bright Events

Bright Events is an API that allows event organizers to create and manage different types of events. The platform also allows Users to to register accounts so that they can view, reserve edit and delete events they intend to attend

## User Registration [/api/v2/auth/register]

### Register a user [POST]

You can create a user by sending a json request with a name, email and password. The
password must be four(4) characters and more.

+ Request (application/json)

        {
            "name":"John Doe"
            "email": "example@gmail.com",
            "password": "123456"
        }

+ Response 201 (application/json)

        {
            "message": "registration succesfull"
        }

+ Response 400 (application/json)

        {
            "message":"All fields are required"
        }

+ Response 400 (application/json)

        {
            "message":"Email has already been registered"
        }

+ Response 400 (application/json)

        {
            "message":"Empty field detected please fill all fields"
        }
+ Response 400 (application/json)

        {
            "message":"Enter a valid email address"
        }


## Login [/api/v2/auth/login]

### Login a user [POST]
You can login a user by sending their email and password. Please take note
of the auth token for you will need it for all user requests.

+ Request (application/json)

        {
            "email": "example@gmail.com",
            "password": "123456"
        }

+ Response 201 (application/json)

        {
            "message":"Login succesfull",
            "x-access-token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwdWJsaWNfaWQiOjMsImV4cCI6MTUxNjI5MDc5MX0.wTgVgRFTK83bFmdn6McFNk74D3r4gY91cuwYTAq05mc"
        }

+ Response 401 (application/json)

        {
            "message":"Invalid email/password"
        }

+ Response 401 (application/json)

        {
            "message":"Incorrect password"
        }

+ Response 401 (application/json)

        {
            "message":"Could not verify"
        }


## Logout [/api/v2/auth/logout]

### Log out a user [POST]

You can log out a user by passing a token to the request header. The
auth token will then be blacklisted.

+ Request (application/json)

    + Headers

        x-access-token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwdWJsaWNfaWQiOjMsImV4cCI6MTUxNjI5MDc5MX0.wTgVgRFTK83bFmdn6McFNk74D3r4gY91cuwYTAq05mc"

+ Response 200 (application/json)

        {
            "message":"Successfully logged out"
        }

+ Response 401 (application/json)

        {
            "message":"failed Provide a valid auth token"
        }

## Reset-Password [/api/v2/auth/reset-password]

### Reset password [POST]

You can change your password by sending passing your old credentials through the request

+ Request (application/json)

        {
            "email": "example@gmail.com",
            "oldPassword": "123456",
            "newPassword":"Quevado"
        }

+ Response 200 (application/json)

        {
            "message":"password has been updated succesfully"
        }

+ Response 400 (application/json)

        {
            "message":"All fields are required"
        }

+ Response 401 (application/json)

        {
            "message":"email address could not be found"
        }

+ Response 401 (application/json)

        {
            "message":"old-password is invalid"
        }


## Event Resources [/api/v2/events]

You can perfom C.R.U.D operations on the API

NOTE: A valid token should be present in the header else a 401 or 403 response
will be returned as seen in the log out section.

### Create an Event [POST]
    Add a new Event attached to the user

+ title (required, string) -  Title of the Event
+ location (required, string) - Location of the Event
+ category (required, string) - Category of the Event
+ description  - A short description about the event of the Event


+ Request (application/json)

    + Headers

            x-access-token: JWT

    + Body

            {
              "title": "It",
              "location":"Deryy",
              "category":"horror",
              "description":"Come see Pennywise the clown"
            }

+ Response 201 (application/json)

        {
          "message":"new event has been created"
        }

+ Response 400 (application/json)

        {
          "message":"Empty field set detected"
        }

+ Response 400 (application/json)

        {
          "message":"An event with a similar title already exists"
        }

## Retrieve events [/api/v2/events]

### Retrieve all Events [GET]

You can get a list of all the Events the results are paginated total results and current page.

+ Request (application/json)

    + Headers

            x-access-token: JWT


+ Response 200 (application/json)

        {
            "Events": [
                {
                    "category": "traditional",
                    "description": "Come see Sonah jorbateh Live",
                    "id": 1,
                    "location": "nairobi",
                    "title": "Jorbateh"
                },
                {
                    "category": "fables",
                    "description": "the sky is definitely falling",
                    "id": 2,
                    "location": "manhatan island",
                    "title": "Chicken little"
                }
            ],
            "num_results": 2,
            "page": 1,
            "total_pages": 1
        }

## Update [/api/v2/events/{eventTitle}]

+ Parameters

    + eventTitle (required,string) - Title of the event to be updated

### Update an Event [PUT]

You can update the details of an Event

+ title (required, string) -  Title of the Event
+ location (required, string) - Location of the Event
+ category (required, string) - Category of the Event
+ description  - A short description about the event of the Event

+ Request (application/json)

    + Headers

            x-access-token: JWT


    + Body

            {
              "title": "Travel",
              "category":"dance",
              "location":"France",
              "description":"The best event ever"
            }

+ Response 201 (application/json)

        {
             "message" : "The event has been updated!"
        }

+ Response 400 (application/json)

        {
             "message" : "The requested event was not found!"
        }

## Delete resource [/api/v2/events/{eventTitle}]

+ Parameters
    + eventTitle (required,string) - Title of the event to be deleted

### Delete an Event [DELETE]

+ Request (application/json)

    + Headers

            x-access-token: JWT

+ Response 200 (application/json)

        {
          "message" : "The event has been deleted!"
        }

+ Response 400 (application/json)

        {
          "message" : "The requested event was not found!"
        }


## RSVP resource [/api/v2/event/{eventId}/rsvp]

### Reserve for an Event [POST]

An User can reserve for an event by passing the correct title of the event in the param section

+ Parameters

+ eventId (required, string) - Title of the event to be deleted


+ Request (application/json)

    + Headers

            x-access-token: JWT

+ Response 200 (application/json)

        {
           "message":"Welcome John your reservation has been approved"
        }

+ Response 403 (application/json)

        {
          "message": "you have already reserved for Jorbateh"
        }

## RSVP resource [/api/v2/event/{eventId}/rsvp]

+ Parameters
    + eventId (required,number) - Title of the event to be deleted

### Reserve for an Event [GET]

+ Request (application/json)

    + Headers

            x-access-token: JWT

+ Response 200 (application/json)

        {
          "guests": [
              {
                  "email": "john@gmail.com",
                  "name": "John"
              },
              {
                  "email": "eva@admin.com",
                  "name": "Eva"
              },
              {
                  "email": "lis@gmail.com",
                  "name": "Lisa"
              }
          ],
          "message": "Guests attending Jorbateh"
        }

+ Response 403 (application/json)

        {
           "message":"Please Enter a valid event title"
        }


## Search events resources [/api/v2/events/<searchQuery>]

+ Parameters
    + searchQuery (required,string) - a part of the string title being queried

### Search for an event [GET]

You can search through the Events, the results are paginated total results and current page.

+ Response 200 (application/json)

        {
            "search_results": [
                {
                    "category": "traditional",
                    "description": "Come see Sonah jorbateh Live",
                    "id": 1,
                    "location": "nairobi",
                    "title": "Jorbateh"
                },
                {
                    "category": "fables",
                    "description": "the sky is definitely falling",
                    "id": 2,
                    "location": "manhatan island",
                    "title": "Joram"
                }
            ],
            "num_results": 2,
            "page": 1,
            "total_pages": 1
        }

## Filter event resources [/api/v2/events/category/<category>]

+ Parameters
    + category (required,string) - category of the event

### Filter events [GET]

You can filter events based on the category.

+ Response 200 (application/json)

        {
            "filter_results": [
                {
                    "category": "traditional",
                    "description": "Come see Sonah jorbateh Live",
                    "id": 1,
                    "location": "nairobi",
                    "title": "Jorbateh"
                },
                {
                    "category": "traditional",
                    "description": "the sky is definitely falling",
                    "id": 2,
                    "location": "manhatan island",
                    "title": "Joram"
                }
            ],
            "num_results": 2,
            "page": 1,
            "total_pages": 1
        }

## Filter event resources [/api/v2/events/location/<category>]

+ Parameters
    + location (required,string) - location of the event

### Filter events [GET]

You can filter events based on their location.

+ Response 200 (application/json)

        {
            "filter_results": [
                {
                    "category": "traditional",
                    "description": "Come see Sonah jorbateh Live",
                    "id": 1,
                    "location": "nairobi",
                    "title": "Jorbateh"
                },
                {
                    "category": "traditional",
                    "description": "the sky is definitely falling",
                    "id": 2,
                    "location": "nairobi",
                    "title": "Joram"
                }
            ],
            "num_results": 2,
            "page": 1,
            "total_pages": 1
        }
