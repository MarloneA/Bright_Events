FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Bright Events

Bright Events is a platform where event organizers can create and manage different types of events. The platform also allows Users to to create accounts so that they can view, reserve edit and delete events they intend to attend

## User Registration [/auth/register]

### Register a user [POST]

You can create a user by sending a json request with an email and password. The
password must be four(4) characters and more.

+ Request (application/json)

        {
            "name":"John Doe"
            "email": "example@gmail.com",
            "password": "123456"
        }

+ Response 201 (application/json)

        {

            "message": "Successfully registered",
            "status": "success"
        }

+ Response 202 (application/json)

        {
            "message": "Missing or wrong email format or password",
            "status": "failed"
        }

+ Response 202 (application/json)

        {
            "message": "Failed, User already exists, Please sign In",
            "status": "failed"
        }

+ Response 202 (application/json)

        {
          "message": "Content-type must be json",
          "status": "failed"
        }


## Login [/auth/login]

### Login a user [POST]
You can login a user by sending their email and password. Please take note
of the auth token for you will need it for all user requests.

+ Request (application/json)

        {
            "email": "example@gmail.com",
            "password": "123456"
        }

+ Response 201 (application/json)

        {
            "message": "Login Succesful",
            "status": "success"
        }

+ Response 202 (application/json)

        {
          "message": "Content-type must be json",
          "status": "failed"
        }

+ Response 401 (application/json)

        {
          "message": "Missing or wrong email format or password is less than four characters",
          "status": "failed"
        }

+ Response 401 (application/json)

        {
          "message": "User does not exist or password is incorrect",
          "status": "failed"
        }


## Logout [/auth/logout]

### Log out a user [POST]

You can log out a user by sending a request with their email and address. The
auth token will then be invalidated.

+ Request (application/json)

        + Cookies

            session['user']: user['email']

+ Response 200 (application/json)

        {
            "message": "Successfully logged out",
            "status": "success"
        }

+ Response 401 (application/json)

        {
          "message": "cookie has been deleted, Please login again",
          "status": "failed"
        }

## Event Resources [/api/events]

You can create, read, update and delete events.

NOTE: A valid token should be present in the header else a 401 or 403 response
will be returned as seen in the log out section.

### Create an Event [POST]
    Add a new Event attached to the user

+ title (required, string) -  Title of the Event
+ location (required, string) - Location of the Event
+ category (required, string) - Category of the Event
+ description  - A short description about the event of the Event


+ Request (application/json)

    + Body

            {
              "title": "Extravaganza",
              "location":"nakuru",
              "category":"dance",
              "description":"The best event ever",
              "date":"date of event"
            }

+ Response 201 (application/json)

        {
            "createdAt": "Wed, 23 Aug 2017 10:14:52 GMT",
            "id": 2,
            "modifiedAt": "Wed, 23 Aug 2017 10:14:52 GMT",
            "title": "Extravaganza",
            "location":"nakuru",
            "category":"dance",
            "description":"The best event ever",
            "date":"date of event"
            "status": "success"
        }

+ Response 400 (application/json)

        {
          "message": "Please provide Title,location and category of event",
          "status": "failed"
        }

### Retrieve all Events [GET]

You can get a list of all the Events .

+ Request (application/json)


+ Response 200 (application/json)

        {
            "id":"32",
            "title":"Rumba",
            "category":"dance",
            "location":"nairobi",
            "description":"A wonderful event extravaganza"

        },

        {
            "id":"64",
            "title":"Flamenco",
            "category":"mariachi",
            "location":"nakuru",
            "description":"The best experience so far"

        }

### Edit an Event [PUT]

You can update the name of the Bucket

+ name (required, string) -  Name of the Bucket

+ Request (application/json)

    + Body

            {
              "title": "Travel",
              "category":"dance",
              "location":"France",
              "description":"The best event ever"
            }

+ Response 201 (application/json)

        {
            "createdAt": "Tue, 05 Sep 2017 17:55:33 GMT",
            "id": 2,
            "modifiedAt": "Tue, 05 Sep 2017 17:55:33 GMT",
            "title": "Travel",
            "category":"dance",
            "location":"France",
            "description":"The best event ever"
            "status": "success"
        }

+ Response 400 (application/json)

        {
          "message": "Please provide a valid Event Id",
          "status": "failed"
        }

+ Response 400 (application/json)

        {
          "message": "No attribute or value was specified, nothing was changed",
          "status": "failed"
        }

+ Response 404 (application/json)

        {
          "message": "The Event with Id  does not exist",
          "status": "failed"
        }

### Delete an Event [DELETE]

+ Request (application/json)

+ Response 200 (application/json)

        {
            "message": "Successfully deleted the event Id 32",
            "status": "success"
        }

+ Response 400 (application/json)

        {
          "message": "Please provide a valid Event Id",
          "status": "failed"
        }

+ Response 404 (application/json)

        {
          "message": "Event cannot be found",
          "status": "failed"
        }
